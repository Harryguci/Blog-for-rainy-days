<h2>Package Management Basics</h2>

<h3>1. Introduction:</h3>

<h3>2. Introduction:</h3>
<span><b>- Define:</b><span>
<p>
+ A denpendency is a third-party bit of software<br/>
+ Probably written by someone else, ideally solves a single problem for you<br/>
+ Might include sub-dependencies that you didn't explicitly install<br/>
- A simple example of a useful Dependency that your project might need is some code to calculate relative dates.<br/>
- A project dependency can be an entire javascript library and framwork - such as Vue js, React... Or a very small utility like our human - readable date library. Or can be a command line tool.<br/>
- Without modern build tools, dependencies might be included in your projects by <script>. BUT this might not work right out of the box.<br/>
- In addition, what happens if you find a better tool that you want to use instead of the current one, or a new version of your dependencies that you want to update to? This is not too painful for a couple of dependencies. But in larger project with many dependencies is a challenge.<br/>
- It makes more reasons to use a package manager such as npm.<br/>
</p>

<h3>3. What exactly is a package manager?</h3>
<p>- Define: A package manager is a system that will manage your dependencies </p><br/>